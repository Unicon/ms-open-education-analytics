{
	"name": "GoogleClassroom_setup",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "spark1",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2"
			}
		},
		"metadata": {
			"saveOutput": true,
			"synapse_widget": {
				"version": "0.1"
			},
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/88bc4ad2-b92a-4cec-9c63-bac0d9696a30/resourceGroups/rg-oea-esola/providers/Microsoft.Synapse/workspaces/syn-oea-esola/bigDataPools/spark1",
				"name": "spark1",
				"type": "Spark",
				"endpoint": "https://syn-oea-esola.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/spark1",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "2.4",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"# Imports\r\n",
					"import requests\r\n",
					"import json\r\n",
					"from pyspark.sql import SparkSession\r\n",
					"from pyspark.sql.utils import AnalysisException\r\n",
					"from pyspark.sql.functions import from_json, col\r\n",
					"from notebookutils import mssparkutils"
				],
				"execution_count": 121
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": true
				},
				"source": [
					"#Variables that need to be set\r\n",
					"storage_account = 'stoeaesola'\r\n",
					"keyVaultName = \"oladevkeyvault\"\r\n",
					"secretKey = \"olaoauth2functionkey\"\r\n",
					"linkedServiceName = \"AzureKeyVault\"\r\n",
					"use_test_env = False\r\n",
					"oAuth2TokenBaseUrl = f\"https://olagoogleoauth2.azurewebsites.net/api/GetOAuth2Token\""
				],
				"execution_count": 122
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": true
				},
				"source": [
					"# Prod / Test Toggle\r\n",
					"if use_test_env:\r\n",
					"    stage1 = 'abfss://test-env@' + storage_account + '.dfs.core.windows.net/stage1'\r\n",
					"    stage2 = 'abfss://test-env@' + storage_account + '.dfs.core.windows.net/stage2'\r\n",
					"    stage3 = 'abfss://test-env@' + storage_account + '.dfs.core.windows.net/stage3'\r\n",
					"else:\r\n",
					"    stage1 = 'abfss://stage1@' + storage_account + '.dfs.core.windows.net'\r\n",
					"    stage2 = 'abfss://stage2@' + storage_account + '.dfs.core.windows.net'\r\n",
					"    stage3 = 'abfss://stage3@' + storage_account + '.dfs.core.windows.net'"
				],
				"execution_count": 123
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": true
				},
				"source": [
					"# Fetch Google Classroom API Bearer Token\r\n",
					"ss = SparkSession.builder.getOrCreate()\r\n",
					"sc = spark.sparkContext\r\n",
					"\r\n",
					"token_library = ss._jvm.com.microsoft.azure.synapse.tokenlibrary.TokenLibrary\r\n",
					"code = token_library.getSecret(keyVaultName, secretKey, linkedServiceName)\r\n",
					"oAuth2TokenUrl = f\"{oAuth2TokenBaseUrl}?code={code}\"\r\n",
					"if (len(code) > 0):\r\n",
					"    r = requests.get(oAuth2TokenUrl)\r\n",
					"    tokenJson = json.loads(r.text);\r\n",
					"    bearerToken = f\"Bearer {tokenJson['token']}\""
				],
				"execution_count": 124
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": true
				},
				"source": [
					"def getRequestHeaders():\r\n",
					"    return {\r\n",
					"        \"Authorization\" : bearerToken, \r\n",
					"        \"Accept-Encoding\": \"gzip\", \r\n",
					"        #User-Agent provided based on google performance docs - https://developers.google.com/classroom/guides/performance\r\n",
					"        \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.93 Safari/537.36\"\r\n",
					"        }    "
				],
				"execution_count": 125
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": true
				},
				"source": [
					"# Load Google Classroom courses data into data frame and save to stage 1\r\n",
					"googleClassroomBaseUrl = \"https://classroom.googleapis.com/v1/\"\r\n",
					"googleClassroomRelativeUrl = \"courses\"\r\n",
					"headers = getRequestHeaders()\r\n",
					"\r\n",
					"r = requests.get(f\"{googleClassroomBaseUrl}{googleClassroomRelativeUrl}\", headers=headers)\r\n",
					"coursesJson = json.dumps(json.loads(r.text)[\"courses\"]);\r\n",
					"coursesDf = spark.read.json(sc.parallelize([coursesJson]))\r\n",
					"coursesDf.write.format('json').mode('overwrite').save(stage1 + '/googleclassroom/courses')"
				],
				"execution_count": 126
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": true
				},
				"source": [
					"def ingestResource(courseId, resource):\r\n",
					"    r = requests.get(f\"{googleClassroomBaseUrl}{googleClassroomRelativeUrl}/{courseId}/{resource}\", headers=headers)\r\n",
					"    resourcesJson = json.dumps(json.loads(r.text)[resource]);\r\n",
					"    resourceDf = spark.read.json(sc.parallelize([resourcesJson]))\r\n",
					"    resourceDf.write.format('json').mode('append').save(stage1 + f'/googleclassroom/{resource}')"
				],
				"execution_count": 127
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": true
				},
				"source": [
					"# Process Stage 2 Courses\r\n",
					"# Convert from JSON to Parquet\r\n",
					"# Save in stage 2 container\r\n",
					"\r\n",
					"def processStage2Courses():\r\n",
					"    sourceData = stage1 + f'/googleclassroom/courses'\r\n",
					"    try:\r\n",
					"        dfCourses = spark.read.json(sourceData)\r\n",
					"        dfCourses.write.format(\"parquet\").mode(\"overwrite\").save(stage2 + f'/googleclassroom/courses')\r\n",
					"        \r\n",
					"    except AnalysisException as e:\r\n",
					"        print (e)\r\n",
					"        print(f\"Source data not found: {sourceData}\")"
				],
				"execution_count": 160
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": true
				},
				"source": [
					"# Process Stage 2 Course Students\r\n",
					"# Convert from JSON to Parquet\r\n",
					"# Save in stage 2 container\r\n",
					"\r\n",
					"def processStage2CourseStudents():\r\n",
					"    sourceData = stage1 + f'/googleclassroom/students'\r\n",
					"    try:\r\n",
					"        df = spark.read.json(sourceData)\r\n",
					"        dfCourseStudents = df.select(\"courseId\", \"userId\")\r\n",
					"        dfCourseStudents.write.format(\"parquet\").mode(\"overwrite\").save(stage2 + f'/googleclassroom/coursestudents')\r\n",
					"        dfUsers = df.select(\"profile.*\")\r\n",
					"        dfUsers.write.format(\"parquet\").mode(\"append\").save(stage2 + f'/googleclassroom/users')\r\n",
					"        \r\n",
					"    except AnalysisException as e:\r\n",
					"        print (e)\r\n",
					"        print(f\"Source data not found: {sourceData}\")"
				],
				"execution_count": 154
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": true
				},
				"source": [
					"# Process Stage 2 Course Teachers\r\n",
					"# Convert from JSON to Parquet\r\n",
					"# Save in stage 2 container\r\n",
					"\r\n",
					"def processStage2CourseTeachers():\r\n",
					"    sourceData = stage1 + f'/googleclassroom/teachers'\r\n",
					"    try:\r\n",
					"        df = spark.read.json(sourceData)\r\n",
					"        dfCourseStudents = df.select(\"courseId\", \"userId\")\r\n",
					"        dfCourseStudents.write.format(\"parquet\").mode(\"overwrite\").save(stage2 + f'/googleclassroom/courseteachers')\r\n",
					"        dfUsers = df.select(\"profile.*\")\r\n",
					"        dfUsers.write.format(\"parquet\").mode(\"append\").save(stage2 + f'/googleclassroom/users')\r\n",
					"        \r\n",
					"    except AnalysisException as e:\r\n",
					"        print (e)\r\n",
					"        print(f\"Source data not found: {sourceData}\")"
				],
				"execution_count": 155
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": true
				},
				"source": [
					"def processStage2Data():\r\n",
					"    processStage2Courses()\r\n",
					"    processStage2CourseTeachers()\r\n",
					"    processStage2CourseStudents()"
				],
				"execution_count": 158
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": true
				},
				"source": [
					"def processStage3Data():\r\n",
					"    processStage3CourseTeachers()\r\n",
					"    processStage3CourseStudents()"
				],
				"execution_count": 152
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": true
				},
				"source": [
					"def processCourseRow(row):\r\n",
					"    courseId = row[\"id\"]\r\n",
					"    ingestResource(courseId, \"students\")\r\n",
					"    ingestResource(courseId, \"teachers\")"
				],
				"execution_count": 130
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": true
				},
				"source": [
					"# Create spark db to allow for access to the data in the delta-lake via SQL on-demand.\r\n",
					"# This is only creating metadata for SQL on-demand, pointing to the data in the delta-lake.\r\n",
					"# This also makes it possible to connect in Power BI via the azure sql data source connector.\r\n",
					"def create_spark_db(db_name, source_path):\r\n",
					"    spark.sql('CREATE DATABASE IF NOT EXISTS ' + db_name)\r\n",
					"    try:\r\n",
					"        spark.sql(\"create table if not exists \" + db_name + f\".courses using PARQUET location '\" + source_path + f\"/courses'\")  \r\n",
					"        spark.sql(\"create table if not exists \" + db_name + f\".courseteachers using PARQUET location '\" + source_path + f\"/courseteachers'\")  \r\n",
					"        spark.sql(\"create table if not exists \" + db_name + f\".coursestudents using PARQUET location '\" + source_path + f\"/coursestudents'\")  \r\n",
					"        spark.sql(\"create table if not exists \" + db_name + f\".users using PARQUET location '\" + source_path + f\"/users'\")  \r\n",
					"    except AnalysisException:\r\n",
					"        print(f\"Table {canvas_entity} could not be created in {db_name}\")"
				],
				"execution_count": 165
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": true
				},
				"source": [
					"#Clear out previous data\r\n",
					"def clearStage1Data():\r\n",
					"    sourceData = stage1 + f'/googleclassroom/students'\r\n",
					"    mssparkutils.fs.mkdirs(sourceData)\r\n",
					"    mssparkutils.fs.rm(sourceData, True)\r\n",
					"    mssparkutils.fs.mkdirs(sourceData)\r\n",
					"    sourceData = stage1 + f'/googleclassroom/teachers'\r\n",
					"    mssparkutils.fs.mkdirs(sourceData)\r\n",
					"    mssparkutils.fs.rm(sourceData, True)\r\n",
					"    mssparkutils.fs.mkdirs(sourceData)"
				],
				"execution_count": 131
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": true
				},
				"source": [
					"#Clear out previous data\r\n",
					"def clearStage2Data():\r\n",
					"    sourceData = stage2 + f'/googleclassroom/users'\r\n",
					"    mssparkutils.fs.mkdirs(sourceData)\r\n",
					"    mssparkutils.fs.rm(sourceData, True)\r\n",
					"    mssparkutils.fs.mkdirs(sourceData)    "
				],
				"execution_count": 146
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": true
				},
				"source": [
					"def ingestStage1Data():\r\n",
					"# Iterate through Courses to fetch course related data\r\n",
					"    for i in coursesDf.rdd.toLocalIterator():\r\n",
					"        processCourseRow(i)"
				],
				"execution_count": 132
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": true
				},
				"source": [
					"clearStage1Data()\r\n",
					"clearStage2Data()\r\n",
					"ingestStage1Data()\r\n",
					"processStage2Data()\r\n",
					"\r\n",
					"db_prefix = 'test_' if use_test_env else ''\r\n",
					"create_spark_db(db_prefix + 's2_googleclassroom', stage2 + '/googleclassroom')\r\n",
					"create_spark_db(db_prefix + 's3_googleclassroom', stage3 + '/googleclassroom')"
				],
				"execution_count": 166
			}
		]
	}
}