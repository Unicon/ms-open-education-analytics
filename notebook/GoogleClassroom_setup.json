{
	"name": "GoogleClassroom_setup",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "spark1",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2"
			}
		},
		"metadata": {
			"saveOutput": true,
			"synapse_widget": {
				"version": "0.1"
			},
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/88bc4ad2-b92a-4cec-9c63-bac0d9696a30/resourceGroups/rg-oea-esola/providers/Microsoft.Synapse/workspaces/syn-oea-esola/bigDataPools/spark1",
				"name": "spark1",
				"type": "Spark",
				"endpoint": "https://syn-oea-esola.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/spark1",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "2.4",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"# Imports\r\n",
					"import requests\r\n",
					"import json\r\n",
					"from pyspark.sql import SparkSession\r\n",
					"from pyspark.sql.utils import AnalysisException\r\n",
					"from pyspark.sql.functions import from_json, col, explode, lit\r\n",
					"from notebookutils import mssparkutils"
				],
				"execution_count": 939
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": true
				},
				"source": [
					"#Variables that need to be set\r\n",
					"storage_account = 'stoeaesola'\r\n",
					"keyVaultName = \"oladevkeyvault\"\r\n",
					"secretKey = \"olaoauth2functionkey\"\r\n",
					"linkedServiceName = \"AzureKeyVault\"\r\n",
					"use_test_env = False\r\n",
					"oAuth2TokenBaseUrl = f\"https://olagoogleoauth2.azurewebsites.net/api/GetOAuth2Token\""
				],
				"execution_count": 940
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": true
				},
				"source": [
					"# Prod / Test Toggle\r\n",
					"if use_test_env:\r\n",
					"    stage1 = 'abfss://test-env@' + storage_account + '.dfs.core.windows.net/stage1'\r\n",
					"    stage2 = 'abfss://test-env@' + storage_account + '.dfs.core.windows.net/stage2'\r\n",
					"    stage3 = 'abfss://test-env@' + storage_account + '.dfs.core.windows.net/stage3'\r\n",
					"else:\r\n",
					"    stage1 = 'abfss://stage1@' + storage_account + '.dfs.core.windows.net'\r\n",
					"    stage2 = 'abfss://stage2@' + storage_account + '.dfs.core.windows.net'\r\n",
					"    stage3 = 'abfss://stage3@' + storage_account + '.dfs.core.windows.net'"
				],
				"execution_count": 941
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": true
				},
				"source": [
					"# Fetch Google Classroom API Bearer Token\r\n",
					"ss = SparkSession.builder.getOrCreate()\r\n",
					"sc = spark.sparkContext\r\n",
					"token_library = ss._jvm.com.microsoft.azure.synapse.tokenlibrary.TokenLibrary\r\n",
					"code = token_library.getSecret(keyVaultName, secretKey, linkedServiceName)\r\n",
					"oAuth2TokenUrl = f\"{oAuth2TokenBaseUrl}?code={code}\"\r\n",
					"r = requests.get(oAuth2TokenUrl)\r\n",
					"tokenJson = json.loads(r.text);\r\n",
					"bearerToken = f\"Bearer {tokenJson['token']}\"\r\n",
					"bearerToken = \"Bearer ya29.a0AfH6SMA8TO27r0Qu5nKshm3h-IyScmxnQvyfVQUwVGokdO4dSYOZyHchzO4ZVyScPdr0DqBWvx8CQB0KCD69XFcceInVjI2cI8YKxQ4VFIbwEIIJ3Clddu-21KKth8_HDInkJq3DgWeGnVr0fPrbA90bhyXE\" "
				],
				"execution_count": 942
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": true
				},
				"source": [
					"def getRequestHeaders():\r\n",
					"    return {\r\n",
					"        \"Authorization\" : bearerToken, \r\n",
					"        \"Accept-Encoding\": \"gzip\", \r\n",
					"        #User-Agent provided based on google performance docs - https://developers.google.com/classroom/guides/performance\r\n",
					"        \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.93 Safari/537.36\"\r\n",
					"        }    "
				],
				"execution_count": 943
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": true
				},
				"source": [
					"# Process Stage 1 Courses\r\n",
					"# Request JSON from Google Classroom API\r\n",
					"# Save in stage 1 container\r\n",
					"def processStage1Courses():\r\n",
					"    courseIds = []\r\n",
					"    \r\n",
					"    # Load Google Classroom courses data into data frame and save to stage 1\r\n",
					"    headers = getRequestHeaders()\r\n",
					"    r = requests.get(f\"https://classroom.googleapis.com/v1/courses\", headers=headers)\r\n",
					"    responseJson = json.loads(r.text)\r\n",
					"    coursesJson = json.dumps(responseJson[\"courses\"]);\r\n",
					"    coursesDf = spark.read.json(sc.parallelize([coursesJson]))\r\n",
					"    coursesDf.write.format('json').mode('append').save(stage1 + '/googleclassroom/courses')\r\n",
					"    \r\n",
					"    for course in responseJson[\"courses\"]:\r\n",
					"        courseIds.append(course[\"id\"])\r\n",
					"\r\n",
					"    while \"nextPageToken\" in responseJson:\r\n",
					"        print(\"Requesting next courses page\")\r\n",
					"        nextPageToken = responseJson[\"nextPageToken\"]\r\n",
					"        r = requests.get(f\"https://classroom.googleapis.com/v1/courses?pageToken={nextPageToken}\", headers=headers)\r\n",
					"        responseJson = json.loads(r.text)\r\n",
					"        coursesJson = json.dumps(responseJson[\"courses\"]);\r\n",
					"        coursesDf = spark.read.json(sc.parallelize([coursesJson]))\r\n",
					"        coursesDf.write.format('json').mode('append').save(stage1 + '/googleclassroom/courses')\r\n",
					"\r\n",
					"        for course in responseJson[\"courses\"]:\r\n",
					"            courseIds.append(course[\"id\"])\r\n",
					"\r\n",
					"    return courseIds"
				],
				"execution_count": 944
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": true
				},
				"source": [
					"# Process Stage 2 Courses\r\n",
					"# Convert from JSON to Parquet\r\n",
					"# Save in stage 2 container\r\n",
					"\r\n",
					"def processStage2Courses():\r\n",
					"    sourceData = stage1 + f'/googleclassroom/courses'\r\n",
					"    try:\r\n",
					"        df = spark.read.json(sourceData)\r\n",
					"        df.write.format(\"parquet\").mode(\"overwrite\").save(stage2 + f'/googleclassroom/courses')\r\n",
					"        \r\n",
					"    except AnalysisException as e:\r\n",
					"        print (e)"
				],
				"execution_count": 945
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": true
				},
				"source": [
					"# Process Stage 3 Courses\r\n",
					"# Convert from Parquet to Parquet\r\n",
					"# Save in stage 3 container\r\n",
					"\r\n",
					"def processStage3Courses():\r\n",
					"    sourceData = stage2 + f'/googleclassroom/courses'\r\n",
					"    try:\r\n",
					"        df = spark.read.parquet(sourceData)\r\n",
					"        df.write.format(\"parquet\").mode(\"overwrite\").save(stage3 + f'/googleclassroom/courses')\r\n",
					"    except AnalysisException as e:\r\n",
					"        print (e)"
				],
				"execution_count": 946
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": true
				},
				"source": [
					"# Process Stage 2 Course Resources without transform\r\n",
					"# Convert from JSON to Parquet\r\n",
					"# Save in stage 2 container\r\n",
					"def processStage2CourseResourceNoTransform(resources):\r\n",
					"    for resource in resources:\r\n",
					"        sourceData = stage1 + f'/googleclassroom/{resource}'\r\n",
					"        try:\r\n",
					"            df = spark.read.json(sourceData)\r\n",
					"            df.write.format(\"parquet\").mode(\"overwrite\").save(stage2 + f'/googleclassroom/course{resource}')\r\n",
					"        except AnalysisException as e:\r\n",
					"            print (e)"
				],
				"execution_count": 947
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": true
				},
				"source": [
					"# Process Stage 3 Course Resources without transform\r\n",
					"# Convert from Parquet to Parquet\r\n",
					"# Save in stage 3 container\r\n",
					"def processStage3CourseResourceNoTransform(resources):\r\n",
					"    for resource in resources:\r\n",
					"        sourceData = stage2 + f'/googleclassroom/{resource}'\r\n",
					"        try:\r\n",
					"            df = spark.read.parquet(sourceData)\r\n",
					"            df.write.format(\"parquet\").mode(\"overwrite\").save(stage3 + f'/googleclassroom/course{resource}')\r\n",
					"        except AnalysisException as e:\r\n",
					"            print (e)"
				],
				"execution_count": 948
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": true
				},
				"source": [
					"# Process Stage 2 Course Students\r\n",
					"# Convert from JSON to Parquet\r\n",
					"# Save in stage 2 container\r\n",
					"\r\n",
					"def processStage2CourseStudents():\r\n",
					"    sourceData = stage1 + f'/googleclassroom/students'\r\n",
					"    try:\r\n",
					"        df = spark.read.json(sourceData)\r\n",
					"        dfCourseStudents = df.select(\"courseId\", \"userId\")\r\n",
					"        dfCourseStudents.write.format(\"parquet\").mode(\"overwrite\").save(stage2 + f'/googleclassroom/coursestudents')\r\n",
					"\r\n",
					"        dfUsers = df.select(\"userId\", \"profile.name.*\").distinct()\r\n",
					"        dfUsers.write.format(\"parquet\").mode(\"overwrite\").save(stage2 + f'/googleclassroom/users')\r\n",
					"\r\n",
					"        dfUserPermissions = df.select(\"userId\", explode(\"profile.permissions.permission\").alias(\"permission\")).distinct()\r\n",
					"        dfUserPermissions.write.format(\"parquet\").mode(\"append\").save(stage2 + f'/googleclassroom/userpermissions')\r\n",
					"    except AnalysisException as e:\r\n",
					"        print (e)"
				],
				"execution_count": 949
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": true
				},
				"source": [
					"# Process Stage 3 Course Students\r\n",
					"# Convert from Parquest to Parquet\r\n",
					"# Save in stage 3 container\r\n",
					"\r\n",
					"def processStage3CourseStudents():\r\n",
					"    sourceData = stage2 + f'/googleclassroom/coursestudents'\r\n",
					"    try:\r\n",
					"        df = spark.read.parquet(sourceData)\r\n",
					"        df.write.format(\"parquet\").mode(\"overwrite\").save(stage3 + f'/googleclassroom/coursestudents')\r\n",
					"    except AnalysisException as e:\r\n",
					"        print (e)"
				],
				"execution_count": 950
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": true
				},
				"source": [
					"# Process Stage 2 Course Teachers\r\n",
					"# Convert from Parquet to Parquet\r\n",
					"# Save in stage 2 container\r\n",
					"\r\n",
					"def processStage2CourseTeachers():\r\n",
					"    sourceData = stage1 + f'/googleclassroom/teachers'\r\n",
					"    try:\r\n",
					"        df = spark.read.json(sourceData)\r\n",
					"        dfCourseTeachers = df.select(\"courseId\", \"userId\")\r\n",
					"        dfCourseTeachers.write.format(\"parquet\").mode(\"overwrite\").save(stage2 + f'/googleclassroom/courseteachers')\r\n",
					"        \r\n",
					"        dfUsers = df.select(\"userId\", \"profile.name.*\")\r\n",
					"        dfUsers.write.format(\"parquet\").mode(\"append\").save(stage2 + f'/googleclassroom/users')\r\n",
					"        \r\n",
					"        dfUserPermissions = df.select(\"userId\", explode(\"profile.permissions.permission\").alias(\"permission\")).distinct()\r\n",
					"        dfUserPermissions.write.format(\"parquet\").mode(\"append\").save(stage2 + f'/googleclassroom/userpermissions')\r\n",
					"\r\n",
					"    except AnalysisException as e:\r\n",
					"        print (e)"
				],
				"execution_count": 951
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": true
				},
				"source": [
					"# Process Stage 3 Course Teachers\r\n",
					"# Convert from Parquet to Parquet\r\n",
					"# Save in stage 3 container\r\n",
					"\r\n",
					"def processStage3CourseTeachers():\r\n",
					"    sourceData = stage2 + f'/googleclassroom/courseteachers'\r\n",
					"    try:\r\n",
					"        df = spark.read.parquet(sourceData)\r\n",
					"        df.write.format(\"parquet\").mode(\"overwrite\").save(stage3 + f'/googleclassroom/courseteachers')\r\n",
					"    except AnalysisException as e:\r\n",
					"        print (e)"
				],
				"execution_count": 952
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": true
				},
				"source": [
					"# Process Stage 3 Users\r\n",
					"# Convert from Parquet to Parquet\r\n",
					"# Anonymize name\r\n",
					"# Save in stage 3 container\r\n",
					"\r\n",
					"def processStage3Users():\r\n",
					"    sourceData = stage2 + f'/googleclassroom/users'\r\n",
					"    try:\r\n",
					"        df = spark.read.parquet(sourceData)\r\n",
					"        df = df.withColumn(\"familyName\", lit('*')).withColumn(\"fullName\", lit('*')).withColumn(\"givenName\", lit('*'))\r\n",
					"        df.write.format(\"parquet\").mode(\"overwrite\").save(stage3 + f'/googleclassroom/users')\r\n",
					"    except AnalysisException as e:\r\n",
					"        print (e)"
				],
				"execution_count": 953
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": true
				},
				"source": [
					"# Process Stage 3 User Permissions\r\n",
					"# Convert from Parquet to Parquet\r\n",
					"# Save in stage 3 container\r\n",
					"\r\n",
					"def processStage3UserPermissions():\r\n",
					"    sourceData = stage2 + f'/googleclassroom/userpermissions'\r\n",
					"    try:\r\n",
					"        df = spark.read.parquet(sourceData)\r\n",
					"        df.write.format(\"parquet\").mode(\"overwrite\").save(stage3 + f'/googleclassroom/userpermissions')\r\n",
					"    except AnalysisException as e:\r\n",
					"        print (e)"
				],
				"execution_count": 954
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": true
				},
				"source": [
					"def processStage2Data():\r\n",
					"    processStage2Courses()\r\n",
					"    processStage2CourseResourceNoTransform([\"aliases\", \"announcements\", \"announcementmaterials\"])\r\n",
					"    processStage2CourseTeachers()\r\n",
					"    processStage2CourseStudents()"
				],
				"execution_count": 955
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": true
				},
				"source": [
					"def processStage3Data():\r\n",
					"    processStage3Courses()\r\n",
					"    processStage3CourseResourceNoTransform([\"coursealiases\", \"courseannouncements\", \"courseannouncementmaterials\"])\r\n",
					"    processStage3CourseTeachers()\r\n",
					"    processStage3CourseStudents()\r\n",
					"    processStage3Users()\r\n",
					"    processStage3UserPermissions()"
				],
				"execution_count": 956
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": true
				},
				"source": [
					"def ingestResource(courseId, resource, nextPageToken):\r\n",
					"    headers = getRequestHeaders()\r\n",
					"    apiUrl = f\"https://classroom.googleapis.com/v1/courses/{courseId}/{resource}\"\r\n",
					"    \r\n",
					"    if (nextPageToken != \"\"):\r\n",
					"        apiUrl += f\"?pageToken={nextPageToken}\"\r\n",
					"\r\n",
					"    r = requests.get(apiUrl, headers=headers)\r\n",
					"    responseJson = json.loads(r.text)\r\n",
					"\r\n",
					"    if (len(responseJson) == 0):\r\n",
					"        print(f\"For CourseId {courseId} - No data found for resource: {resource}\")\r\n",
					"        return\r\n",
					"    \r\n",
					"    resourcesJson = json.dumps(responseJson[resource]);\r\n",
					"    resourceDf = spark.read.json(sc.parallelize([resourcesJson]))\r\n",
					"\r\n",
					"    #Add courseID to data frame if it does not exist\r\n",
					"    if not 'courseId' in resourceDf.columns:\r\n",
					"        resourceDf = resourceDf.withColumn('courseId', lit(courseId))\r\n",
					"\r\n",
					"    resourceDf.write.format('json').mode('append').save(stage1 + f'/googleclassroom/{resource}')\r\n",
					"\r\n",
					"    #for dtype in resourceDf.dtypes:\r\n",
					"    #    if dtype[1].startswith(\"array<\"):\r\n",
					"    #        subResource = dtype[0]\r\n",
					"    #        subResourceDf = resourceDf.select(col(\"id\").alias(resource[:-1] + \"Id\"), explode(subResource).alias(subResource[:-1]))\r\n",
					"    #        flattenedSubResourceDf = subResourceDf.select(col(resource[:-1] + \"Id\"), col(subResource[:-1] + \".*\"))\r\n",
					"    #        flattenedSubResourceDf.write.format('json').mode('append').save(stage1 + f'/googleclassroom/{resource[:-1]}{subResource}')\r\n",
					"\r\n",
					"    if (\"nextPageToken\" in responseJson):\r\n",
					"        nextPageToken = responseJson.nextPageToken\r\n",
					"        ingestResource(courseId, resource, nextPageToken)\r\n",
					"        \r\n",
					""
				],
				"execution_count": 970
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": true
				},
				"source": [
					"def processCourseRow(courseId):\r\n",
					"    nextPageToken = \"\"\r\n",
					"    ingestResource(courseId, \"aliases\", nextPageToken)\r\n",
					"    ingestResource(courseId, \"announcements\", nextPageToken)\r\n",
					"    ingestResource(courseId, \"students\", nextPageToken)\r\n",
					"    ingestResource(courseId, \"teachers\", nextPageToken)"
				],
				"execution_count": 958
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": true
				},
				"source": [
					"def ingestStage1Data(courseIds):\r\n",
					"    for courseId in courseIds:\r\n",
					"        processCourseRow(courseId)"
				],
				"execution_count": 959
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": true
				},
				"source": [
					"def processStage1Data():\r\n",
					"    ingestStage1Data(processStage1Courses())"
				],
				"execution_count": 960
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": true
				},
				"source": [
					"# Create spark db to allow for access to the data in the delta-lake via SQL on-demand.\r\n",
					"# This is only creating metadata for SQL on-demand, pointing to the data in the delta-lake.\r\n",
					"# This also makes it possible to connect in Power BI via the azure sql data source connector.\r\n",
					"def create_spark_db(db_name, source_path):\r\n",
					"    google_entities = [\"courses\", \"coursealiases\", \"courseannouncements\", \"courseannouncementmaterials\",\"coursestudents\", \"courseteachers\", \"users\", \"userpermissions\"]\r\n",
					"    spark.sql('CREATE DATABASE IF NOT EXISTS ' + db_name)\r\n",
					"\r\n",
					"    for google_entity in google_entities:\r\n",
					"        try:\r\n",
					"            spark.sql(\"drop table if exists \" + db_name + f\".{google_entity}\")  \r\n",
					"            spark.sql(\"create table if not exists \" + db_name + f\".{google_entity} using PARQUET location '\" + source_path + f\"/{google_entity}'\")  \r\n",
					"        except AnalysisException:\r\n",
					"            print(f\"Table {google_entity} could not be created in {db_name}\")"
				],
				"execution_count": 961
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": true
				},
				"source": [
					"def clearSourceData(sourceData):\r\n",
					"    mssparkutils.fs.mkdirs(sourceData)\r\n",
					"    mssparkutils.fs.rm(sourceData, True)\r\n",
					"    mssparkutils.fs.mkdirs(sourceData)"
				],
				"execution_count": 962
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": true
				},
				"source": [
					"#Clear out previous data\r\n",
					"def clearStage1Data():\r\n",
					"    clearSourceData(stage1 + f'/googleclassroom/courses')\r\n",
					"    clearSourceData(stage1 + f'/googleclassroom/students')\r\n",
					"    clearSourceData(stage1 + f'/googleclassroom/teachers')\r\n",
					"    clearSourceData(stage1 + f'/googleclassroom/aliases')\r\n",
					"    clearSourceData(stage1 + f'/googleclassroom/announcements')\r\n",
					"    clearSourceData(stage1 + f'/googleclassroom/announcementmaterials')"
				],
				"execution_count": 963
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": true
				},
				"source": [
					"#Clear out previous data\r\n",
					"def clearStage2Data():\r\n",
					"    clearSourceData(stage2 + f'/googleclassroom/users')\r\n",
					"    clearSourceData(stage2 + f'/googleclassroom/userpermissions')"
				],
				"execution_count": 964
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": true
				},
				"source": [
					"#Clear out previous data\r\n",
					"def clearStage3Data():\r\n",
					"    clearSourceData(stage3 + f'/googleclassroom/users')\r\n",
					"    clearSourceData(stage3 + f'/googleclassroom/userpermissions')"
				],
				"execution_count": 965
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": true
				},
				"source": [
					"clearStage1Data()\r\n",
					"clearStage2Data()\r\n",
					"clearStage3Data()\r\n",
					"processStage1Data()\r\n",
					"processStage2Data()\r\n",
					"processStage3Data()\r\n",
					"\r\n",
					"db_prefix = 'test_' if use_test_env else ''\r\n",
					"create_spark_db(db_prefix + 's2_googleclassroom', stage2 + '/googleclassroom')\r\n",
					"create_spark_db(db_prefix + 's3_googleclassroom', stage3 + '/googleclassroom')"
				],
				"execution_count": 971
			}
		]
	}
}