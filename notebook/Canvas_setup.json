{
	"name": "Canvas_setup",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "spark1",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2"
			}
		},
		"metadata": {
			"saveOutput": true,
			"synapse_widget": {
				"version": "0.1"
			},
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/88bc4ad2-b92a-4cec-9c63-bac0d9696a30/resourceGroups/rg-oea-esola/providers/Microsoft.Synapse/workspaces/syn-oea-esola/bigDataPools/spark1",
				"name": "spark1",
				"type": "Spark",
				"endpoint": "https://syn-oea-esola.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/spark1",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "2.4",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": true
				},
				"source": [
					"# Import Statements\r\n",
					"from pyspark.sql.functions import lit"
				],
				"execution_count": 43
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": true
				},
				"source": [
					"# Non-Static Variables\r\n",
					"storage_account = 'stoeaesola'\r\n",
					"use_test_env = False\r\n",
					"canvas_entities = ['account_dim', 'assignment_dim']\r\n",
					"canvas_entity_columns = [\r\n",
					"    '_c0 Id', \r\n",
					"    '_c0 Id'\r\n",
					"]\r\n",
					"\r\n",
					"canvas_entity_columns_to_anonymize = ['Id']"
				],
				"execution_count": 19
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": true
				},
				"source": [
					"# Production / Test Environment Toggle\r\n",
					"if use_test_env:\r\n",
					"    stage1 = 'abfss://test-env@' + storage_account + '.dfs.core.windows.net/stage1'\r\n",
					"    stage2 = 'abfss://test-env@' + storage_account + '.dfs.core.windows.net/stage2'\r\n",
					"    stage3 = 'abfss://test-env@' + storage_account + '.dfs.core.windows.net/stage3'\r\n",
					"else:\r\n",
					"    stage1 = 'abfss://stage1@' + storage_account + '.dfs.core.windows.net'\r\n",
					"    stage2 = 'abfss://stage2@' + storage_account + '.dfs.core.windows.net'\r\n",
					"    stage3 = 'abfss://stage3@' + storage_account + '.dfs.core.windows.net'"
				],
				"execution_count": 21
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": true
				},
				"source": [
					"def processStage2Entity(entityName, entityColumns):\r\n",
					"    df = spark.read.csv(stage1 + f'/canvas/{entityName}.csv', header='false')\r\n",
					"    if (df.count() > 0):\r\n",
					"        sqlContext.registerDataFrameAsTable(df, entityName)\r\n",
					"        df = spark.sql(f\"select {entityColumns} from {entityName}\")\r\n",
					"        df.write.format(\"parquet\").mode(\"overwrite\").save(stage2 + f'/canvas/{entityName}')"
				],
				"execution_count": 29
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": true
				},
				"source": [
					"def processStage3Entity(entityName, entityColumns):\r\n",
					"    df = spark.read.format('parquet').load(stage2 + f'/canvas/{entityName}')\r\n",
					"    if (df.count() > 0):\r\n",
					"        for column_to_anonymize in canvas_entity_columns_to_anonymize:\r\n",
					"            if (column_to_anonymize in df.columns):\r\n",
					"                df.withColumn(column_to_anonymize, lit('*'))   \r\n",
					"        df.write.format(\"parquet\").mode(\"overwrite\").save(stage3 + f'/canvas/{entityName}')"
				],
				"execution_count": 47
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": true
				},
				"source": [
					"def previewStage3Entity(entityName, entityColumns):\r\n",
					"    df = spark.read.format('parquet').load(stage3 + f'/canvas/{entityName}')\r\n",
					"    if (df.count() > 0):\r\n",
					"        df.show()"
				],
				"execution_count": 45
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": true
				},
				"source": [
					"# Create spark db to allow for access to the data in the delta-lake via SQL on-demand.\r\n",
					"# This is only creating metadata for SQL on-demand, pointing to the data in the delta-lake.\r\n",
					"# This also makes it possible to connect in Power BI via the azure sql data source connector.\r\n",
					"def create_spark_db(db_name, source_path, canvas_entity):\r\n",
					"    spark.sql('CREATE DATABASE IF NOT EXISTS ' + db_name)\r\n",
					"    spark.sql(\"create table if not exists \" + db_name + f\".{canvas_entity} using PARQUET location '\" + source_path + f\"/{canvas_entity}'\")  \r\n",
					""
				],
				"execution_count": 48
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": true
				},
				"source": [
					"\r\n",
					"index = 0;\r\n",
					"db_prefix = 'test_' if use_test_env else ''\r\n",
					"\r\n",
					"for canvas_entity in canvas_entities:\r\n",
					"    processStage2Entity(canvas_entity, canvas_entity_columns[index])\r\n",
					"    processStage3Entity(canvas_entity, canvas_entity_columns[index])\r\n",
					"    previewStage3Entity(canvas_entity, canvas_entity_columns[index])\r\n",
					"    create_spark_db(db_prefix + 's2_canvas', stage2 + '/canvas', canvas_entity)\r\n",
					"    create_spark_db(db_prefix + 's3_canvas', stage3 + '/canvas', canvas_entity)\r\n",
					"    index += 1\r\n",
					""
				],
				"execution_count": 49
			}
		]
	}
}